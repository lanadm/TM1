#region Prolog
#---------------------------

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set Variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strProcessName = GETPROCESSNAME();
strCube_g = 'SKU_3P_WkB';
strWeekCube_g = 't-weeks';
strView_g = 'zz_' | strProcessName | '_ZeroOut';
strSub_g = strView_g;

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Trim the parameters to eliminate leading or trailing blanks
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYear_g = TRIM(pYear);
strStartWeek_g = '1';
strEndWeek_g = '53';
#strEndWeek_g = TRIM(pEndWeek);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set dimension variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYearDim = 'YEAR';
strLocationsDim = 'LOCATIONS';
strSkusDim = 'Lskus';
strWeekDim = 'WEEK';
strStatDim = 'Lstat'; 
strChannelDim = 'Lchannel';

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Determine Number of Weeks in order to extrapolate the End Week and Start Week numbers
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

numWeeks = NUMBR(strEndWeek_g) - NUMBR(strStartWeek_g) + 1;
numEndWeek = NUMBR(strEndWeek_g);
numStartWeek = NUMBR(strStartWeek_g);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# This section Creates a Zero Out View
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strCube = strCube_g;
strView = strView_g;
strSub = strSub_g;

#     =================================
#      If the view already exists, destroy it.
#     =================================

        IF(VIEWEXISTS(strCube, strView) = 1);
            VIEWDESTROY(strCube, strView);
        ENDIF;

#     =================================
#      Create the new zero view
#     =================================

        VIEWCREATE(strCube, strView);
        VIEWEXTRACTSKIPCALCSSET(strCube, strView, 1);
        VIEWEXTRACTSKIPRULEVALUESSET(strCube, strView, 1);
        VIEWEXTRACTSKIPZEROESSET(strCube, strView, 1);

#     =================================
#      Cycle through the dimensions
#     =================================

        i = 1;
        WHILE(TABDIM(strCube, i) @<> '');
            strDim = TABDIM(strCube, i);

#     =================================
#      Check to see if the view subset exists within the dimension.
#           If it exists, delete all elements from the subset
#     =================================

        IF(SUBSETEXISTS(strDim, strSub) = 0);
            SUBSETCREATE(strDim, strSub);
        ENDIF;
        SUBSETDELETEALLELEMENTS(strDim, strSub);    

#     =================================
#      Assign dimension subset to the newly created zero out view
#     =================================

        VIEWSUBSETASSIGN(strCube, strView, strDim, strSub);

#     =================================
#      Add the appropriate elements to the subset
#     =================================

        IF( strDim @= strYearDim );
            strEle = strYear_g;
            SUBSETELEMENTINSERT( strDim, strSub, strEle, SUBSETGETSIZE( strDim, strSub ) + 1 );

        ELSEIF( strDim @= strWeekDim );
            p = numStartWeek;
            WHILE( p <= numEndWeek );
                strLoopEle = CELLGETS( strWeekCube_g, NUMBERTOSTRING(p), 'FY ' | SUBST( strYear_g, 3, 2 ) );
                IF( ELLEV( strDim, strLoopEle ) = 0 );
                    SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1 );
                ENDIF;
                p = p + 1;
            END;

        ELSE;
            p = 1;
            WHILE(p <= DIMSIZ(strDim));
                strLoopEle = DIMNM(strDim, p);
                IF(ELLEV(strDim, strLoopEle) = 0);
                    SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
                ENDIF;
                p = p + 1;
            END;
        ENDIF;

   i = i + 1;

END;

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Use the newly created zero out view to zero the associated values
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

VIEWZEROOUT(strCube, strView);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Once update is complete, destroy the view
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

VIEWDESTROY(strCube, strView);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Destroy the associated subsets
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

i = 1;
WHILE(TABDIM(strCube, i) @<> '');
    strDim = TABDIM(strCube, i);

    IF(SUBSETEXISTS(strDim, strSub) = 1);
       SUBSETDESTROY(strDim, strSub);
    ENDIF;
    i = i + 1;
END;



#---------------------------
#endregion
#region Metadata
#---------------------------

# No Metadata

#---------------------------
#endregion
#region Data
#---------------------------

# No Data

#---------------------------
#endregion
#region Epilog
#---------------------------

# No Epilog





#endregion