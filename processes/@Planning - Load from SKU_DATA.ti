#region Prolog

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set Variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strProcessName = GETPROCESSNAME();
strCube_g = 'SKU_DATA';
strWeekCube_g = 't-weeks';
strView_g = 'zz_' | strProcessName | '_LoadtoPlanning';
strSub_g = strView_g;

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Trim the week parameters to eliminate leading or trailing blanks
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# strStartWeek_g = TRIM(pStartWeek);
# strEndWeek_g = TRIM(pEndWeek);

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set Subset variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYear = TRIM(pYear);
strCategory = TRIM(pCategory);
strLocations = 'All Level 0';
strSKU = '!Extract to Planning Cube';
strWeek = 'FY 24 Weeks - Rollups';
strStats = 'Stat Extract to Plan';
strChannel = 'Planning Channel Rollups';

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set dimension variables
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYearDim = 'YEAR';
strCategoryDim = 'CATEGORY';
strLocationsDim = 'LOCATIONS';
strSKUDim = 'Lskus';
strWeekDim = 'Week';
strStatsDim = 'Lstat';
strChannelDim = 'Lchannel';


#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Determine Number of Weeks in order to extrapolate the End Week and Start Week numbers
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# numWeeks = NUMBR(strEndWeek_g) - NUMBR(strStartWeek_g) + 1;
# numEndWeek = NUMBR(strEndWeek_g);
# numStartWeek = NUMBR(strStartWeek_g);

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# This section Creates Loading View
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strCube = strCube_g;
strView = strView_g;
strSub = strSub_g;

#     =================================
#      If the view already exists, destroy it.
#     =================================

IF(VIEWEXISTS(strCube, strView) = 1);
   VIEWDESTROY(strCube, strView);
ENDIF;

#     =================================
#      Create the new view
#     =================================

VIEWCREATE(strCube, strView);

VIEWEXTRACTSKIPCALCSSET(strCube, strView, 0);
VIEWEXTRACTSKIPRULEVALUESSET(strCube, strView, 0);
VIEWEXTRACTSKIPZEROESSET(strCube, strView, 1);

#     =================================
#      Cycle through the dimensions
#     =================================

i = 1;
WHILE(TABDIM(strCube, i) @<> '');
   strDim = TABDIM(strCube, i);


#     =================================
#      Check to see if the view subset exists within the dimension.
#           If it exists, delete all elements from the subset
#     =================================

   IF(SUBSETEXISTS(strDim, strSub) = 0);
      SUBSETCREATE(strDim, strSub);
   ENDIF;
   SUBSETDELETEALLELEMENTS(strDim, strSub);

#     =================================
#      Assign dimension subset to the newly created zero out view
#     =================================

   VIEWSUBSETASSIGN(strCube, strView, strDim, strSub);

#     =================================
#      Add the appropriate elements to the subset
#     =================================

   IF( strDim @= strYearDim );
      strEle = strYear;
      SUBSETELEMENTINSERT( strDim, strSub, strEle, SUBSETGETSIZE(strDim, strSub ) + 1 );

   # ELSEIF( strDim @= strWeekDim );
   #    p = numStartWeek;
   #    WHILE( p <= numEndWeek );
   #       strLoopEle = CELLGETS( strWeekCube_g, NUMBERTOSTRING( p ), 'FY ' | SUBST(strYear, 3, 2 ) );
   #       IF( ELLEV(strDim, strLoopEle ) = 0 );
   #          SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1 );
   #       ENDIF;
   #       p = p + 1;
   #    END;
   
    ELSEIF( strDim @= strCategoryDim );
      strEle = strCategory;
      SUBSETELEMENTINSERT( strDim, strSub, strEle, SUBSETGETSIZE( strDim, strSub ) + 1 );

    ELSEIF( strDim @= strLocationsDim );
      p = 1;
      WHILE( p <= SUBSETGETSIZE( strDim, strLocations ));
         strLoopEle = SUBSETGETELEMENTNAME( strDim, strLocations, p );
         SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1);
         p = p + 1;
      END;   

    ELSEIF( strDim @= strSKUDim );
      p = 1;
      WHILE( p <= SUBSETGETSIZE( strDim, strSKU ));
         strLoopEle = SUBSETGETELEMENTNAME( strDim, strSKU, p );
         SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1);
         p = p + 1;
      END;     
       
    ELSEIF( strDim @= strWeekDim );
      p = 1;
      WHILE( p <= SUBSETGETSIZE( strDim, strWeek ));
         strLoopEle = SUBSETGETELEMENTNAME( strDim, strWeek, p );
         SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1);
         p = p + 1;
      END;
    
    ELSEIF( strDim @= strStatsDim );
      p = 1;
      WHILE( p <= SUBSETGETSIZE( strDim, strStats ));
         strLoopEle = SUBSETGETELEMENTNAME( strDim, strStats, p );
         SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1);
         p = p + 1;
      END;


    ELSEIF( strDim @= strChannelDim );
      p = 1;
      WHILE( p <= SUBSETGETSIZE( strDim, strChannel ));
         strLoopEle = SUBSETGETELEMENTNAME( strDim, strChannel, p );
         SUBSETELEMENTINSERT( strDim, strSub, strLoopEle, SUBSETGETSIZE( strDim, strSub ) + 1);
         p = p + 1;
      END;

    ENDIF;

   i = i + 1;       

END;


#endregion
#region Data

strPlanYear = pPlanYear;
strPlanWeek = 'Week ' | trim( subst( vWeek, 6, 2 )) | pPlanYear ;
strScenario = pScenario;
strPlanChannel = TRIM(CellGetS('}ElementAttributes_Lchannel', vChannel, 'PlanningCube'));
strBudgetWalk = 'Prior Year';
strPlanProduct = vSKU;
strPlanMeasures = vStat;

IF(VALUE_IS_STRING=1);
    SCellOldValue =  CellGetS( 'SKU_DATA', vYear, vCategory, vLocations, vSKU, vWeek, vStat, vChannel );
ELSE;
    NCellOldValue = CellGetN( 'SKU_DATA', vYear, vCategory, vLocations, vSKU, vWeek, vStat, vChannel );

ENDIF;

if ( VALUE_IS_STRING=1, 
   CellPutS( SVALUE | SCellOldValue, 'Planning', strPlanYear, strPlanWeek, strScenario, strPlanChannel, vLocations, strPlanProduct, strBudgetWalk, strPlanMeasures ), 
   CellPutN( NVALUE + NCellOldValue, 'Planning', strPlanYear, strPlanWeek, strScenario, strPlanChannel, vLocations, strPlanProduct, strBudgetWalk, strPlanMeasures) );


#endregion