#region Prolog

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set Variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strProcessName = GETPROCESSNAME();
strCube_g = 'SKU_3P_Wkb';
strWeekCube_g = 't-weeks';
strView_g = 'zz_' | strProcessName | '_ZeroOut2b';
strSub_g = strView_g;
strStartWeek_g = '1';

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Trim the parameters to eliminate leading or trailing blanks
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYear_g = TRIM(pYear);
strEndWeek_g = TRIM(pEndWeek);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set subset variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strStatSubset_g = 'Z-3P_Wk_Stat';
strSkuSubset_g = 'Z-3P_Wk_Stat';
strLocationsSubset_g = 'Z-3P_Wk_Stat';
strChannelSubset_g = 'Z-3P_Wk_Stat';

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set dimension variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strYearDim = 'YEAR';
strLocationsDim = 'LOCATIONS';
strSkusDim = 'Lskus';
strWeekDim = 'WEEK';
strStatDim = 'Lstat';
strChannelDim = 'Lchannel';


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set Process Variables
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strErrorFile = strProcessName | '_' | TIMST(NOW, '\Y\m\d') | '.csv';
strLogDirectory = CELLGETS('bpmControl','Log Directory','Value');
strError = strLogDirectory | strErrorFile;


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Checks to make sure the fiscal year exists, otherwise creates an error in the errorlog
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strDim = strYearDim;
strElem = strYear_g;
IF(DIMIX(strDim, strElem) = 0);
    ASCIIOUTPUT(strError, 'The value entered, ' | strElem | ', is not a valid element in the ' | strDim | ' dimension.');
    PROCESSERROR;
ENDIF;


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Determine Number of Weeks 
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

numWeeks = NUMBR(strEndWeek_g) - NUMBR(strStartWeek_g) + 1;
numEndWeek = NUMBR(strEndWeek_g);
numStartWeek = NUMBR(strStartWeek_g);

IF(numWeeks < 0);
    ASCIIOUTPUT(strError, 'The  End Week entered, ' | strEndWeek_g | ', must be greater than or equal to the Start Week entered, ' | strStartWeek_g | '.');
    PROCESSERROR;
ENDIF;


#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# This section Creates a Zero Out View
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strCube = strCube_g;
strView = strView_g;
strSub = strSub_g;

#     =================================
#      If the view already exists, destroy it.
#     =================================

IF(VIEWEXISTS(strCube, strView) = 1);
   VIEWDESTROY(strCube, strView);
ENDIF;

#     =================================
#      Create the new zero view
#     =================================

VIEWCREATE(strCube, strView);

VIEWEXTRACTSKIPCALCSSET(strCube, strView, 1);
VIEWEXTRACTSKIPRULEVALUESSET(strCube, strView, 1);
VIEWEXTRACTSKIPZEROESSET(strCube, strView, 1);

#     =================================
#      Cycle through the dimensions
#     =================================

i = 1;
WHILE(TABDIM(strCube, i) @<> '');
   strDim = TABDIM(strCube, i);

#     =================================
#      Check to see if the view subset exists within the dimension.
#           If it exists, delete all elements from the subset
#     =================================

   IF(SUBSETEXISTS(strDim, strSub) = 0);
      SUBSETCREATE(strDim, strSub);
   ENDIF;
   SUBSETDELETEALLELEMENTS(strDim, strSub);

#     =================================
#      Assign dimension subset to the newly created zero out view
#     =================================

   VIEWSUBSETASSIGN(strCube, strView, strDim, strSub);

#     =================================
#      Add the appropriate elements to the subset
#     =================================

    IF(strDim @= strYearDim);
      strEle = strYear_g;
      SUBSETELEMENTINSERT(strDim, strSub, strEle, SUBSETGETSIZE(strDim, strSub) + 1);
   ELSEIF(strDim @= strStatDim);
      p = 1;
      WHILE(p <= SUBSETGETSIZE(strDim, strStatSubset_g));
         strLoopEle = SUBSETGETELEMENTNAME(strDim, strStatSubset_g, p);
         SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
         p = p + 1;
      END;
   ELSEIF(strDim @= strSkusDim);
      p = 1;
      WHILE(p <= SUBSETGETSIZE(strDim, strSkuSubset_g));
         strLoopEle = SUBSETGETELEMENTNAME(strDim, strSkuSubset_g, p);
         SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
         p = p + 1;
      END;
   ELSEIF(strDim @= strWeekDim);
      p = numStartWeek;
      WHILE(p <= numEndWeek);
         strLoopEle = CELLGETS(strWeekCube_g, NUMBERTOSTRING(p), 'FY ' | SUBST(strYear_g, 3, 2) );
         IF(ELLEV(strDim, strLoopEle) = 0);
            SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
         ENDIF;
         p = p + 1;
      END;
 ELSEIF(strDim @= strLocationsDim);
      p = 1;
      WHILE(p <= SUBSETGETSIZE(strDim, strLocationsSubset_g));
         strLoopEle = SUBSETGETELEMENTNAME(strDim, strLocationsSubset_g, p);
         SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
         p = p + 1;
      END;
ELSEIF(strDim @= strChannelDim);
      p = 1;
      WHILE(p <= SUBSETGETSIZE(strDim, strChannelSubset_g));
         strLoopEle = SUBSETGETELEMENTNAME(strDim, strChannelSubset_g, p);
         SUBSETELEMENTINSERT(strDim, strSub, strLoopEle, SUBSETGETSIZE(strDim, strSub) + 1);
         p = p + 1;
      END;

   ENDIF;

    i = i + 1;
END;

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Use the newly created zero out view to zero the associated values
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

VIEWZEROOUT(strCube, strView);

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Destroy the associated subsets
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

i = 1;
WHILE(TABDIM(strCube, i) @<> '');
    strDim = TABDIM(strCube, i);

    i = i + 1;
END;


#endregion